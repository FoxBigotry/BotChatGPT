import datetime
from ai.default.ai_default import OpenAi_default
from ai.prog.ai_prog import OpenAi_prog
from ai.cook.ai_cook import OpenAi_cook
from database.connect import MongoDBActions
from database.models import MessageModel, UserModel

openai_client_default = OpenAi_default()
openai_client_prog = OpenAi_prog()
openai_client_cook = OpenAi_cook()
mongo_actions = MongoDBActions()


async def start_message(chat_topic):
    if chat_topic == '14':
        return ('–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–≤–∞—Äüßë‚Äçüç≥\n'
                '–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≥–æ—Ç–æ–≤–∫–µ.\n'
                '–¢–∞–∫ –∂–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –µ—Å–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ.\n'
                '–ó–Ω–∞–π—Ç–µ, —è –º–æ–≥—É –∑–∞–±—ã—Ç—å –≤—Å—ë –ø–æ —Ç–µ–º–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /reset\n'
                '–ó–∞–±—ã—Ç—å –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ /reset_recipes\n'
                '–ò –º–æ–≥—É –∑–∞–±—ã—Ç—å –≤—Å—ë –∏ –≤–æ –≤—Å–µ—Ö —Ç–µ–º–∞—Ö –ø–æ –∫–æ–º–∞–Ω–¥–µ /reset_all\n'
                '–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?\n'
                '–û –∫—Å—Ç–∞—Ç–∏, –≤ —Å–æ—Å–µ–¥–Ω–µ–º —á–∞—Ç–µ —Å–∏–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Çüë®‚Äçüíª')
    elif chat_topic == '22':
        return ('–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Çüë®‚Äçüíª\n'
                '–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.\n'
                '–ó–Ω–∞–π—Ç–µ, —è –º–æ–≥—É –∑–∞–±—ã—Ç—å –≤—Å—ë –ø–æ —Ç–µ–º–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /reset\n'
                '–ò –º–æ–≥—É –∑–∞–±—ã—Ç—å –≤—Å—ë –∏ –≤–æ –≤—Å–µ—Ö —Ç–µ–º–∞—Ö –ø–æ –∫–æ–º–∞–Ω–¥–µ /reset_all\n'
                '–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?\n'
                '–û –∫—Å—Ç–∞—Ç–∏, –≤ —Å–æ—Å–µ–¥–Ω–µ–º —á–∞—Ç–µ —Å–∏–¥–∏—Ç –ø–æ–≤–∞—Äüßë‚Äçüç≥')
    else:
        return ('–í–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –º–µ—Å—Ç–µ\n'
                '–° –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?')


async def create_or_get_user(user_id, from_user):
    user_data = await mongo_actions.get_user(user_id)
    if not user_data:
        user_data = UserModel(
            user_id=user_id,
            username=from_user.username,
            first_name=from_user.first_name,
            last_name=from_user.last_name
        )
        await mongo_actions.create_user(user_data)
    return user_data


async def create_message(user_id, message_text, chat_topic):
    message_data = MessageModel(
        user_id=user_id,
        datetime=str(datetime.datetime.now()),
        message=message_text,
        chat_topic=chat_topic
    )
    return await mongo_actions.create_message(message_data)


async def handle_gpt_response(user_id, message_text, chat_topic):
    if chat_topic == '14':
        return await openai_client_cook.gpt4(message_text, user_id, chat_topic)
    elif chat_topic == '22':
        return await openai_client_prog.gpt4(message_text, user_id, chat_topic)
    else:
        return await openai_client_default.gpt4(message_text, user_id, chat_topic)


async def final_answer(user_id, message_text, chat_topic):
    message_id = await create_message(user_id, message_text, chat_topic)
    response = await handle_gpt_response(user_id, message_text, chat_topic)
    return message_id, response


# async def speech_to_text_recognition(mp3_file_path):
#     if chat_topic == '14':
#         return await openai_client_cook.speech_to_text_recognition(mp3_file_path)
#     elif chat_topic == '22':
#         return await openai_client_prog.speech_to_text_recognition(mp3_file_path)
#     else:
#         return await openai_client_default.speech_to_text_recognition(mp3_file_path)
